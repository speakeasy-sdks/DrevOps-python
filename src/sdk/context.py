"""Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT."""

import requests as requests_http
from . import utils
from sdk.models import operations
from typing import Any, Optional

class Context:
    _client: requests_http.Session
    _security_client: requests_http.Session
    _server_url: str
    _language: str
    _sdk_version: str
    _gen_version: str

    def __init__(self, client: requests_http.Session, security_client: requests_http.Session, server_url: str, language: str, sdk_version: str, gen_version: str) -> None:
        self._client = client
        self._security_client = security_client
        self._server_url = server_url
        self._language = language
        self._sdk_version = sdk_version
        self._gen_version = gen_version
        
    
    def add_environment_variable_to_context(self, request: operations.AddEnvironmentVariableToContextRequest) -> operations.AddEnvironmentVariableToContextResponse:
        r"""Add or update an environment variable
        Create or update an environment variable within a context. Returns information about the environment variable, not including its value.
        """
        base_url = self._server_url
        
        url = utils.generate_url(operations.AddEnvironmentVariableToContextRequest, base_url, '/context/{context-id}/environment-variable/{env-var-name}', request)
        
        headers = {}
        req_content_type, data, form = utils.serialize_request_body(request, "request_body", 'json')
        if req_content_type not in ('multipart/form-data', 'multipart/mixed'):
            headers['content-type'] = req_content_type
        
        client = self._security_client
        
        http_res = client.request('PUT', url, data=data, files=form, headers=headers)
        content_type = http_res.headers.get('Content-Type')

        res = operations.AddEnvironmentVariableToContextResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[Any])
                res.add_environment_variable_to_context_200_application_json_any_of = out
        else:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[operations.AddEnvironmentVariableToContextDefaultApplicationJSON])
                res.add_environment_variable_to_context_default_application_json_object = out

        return res

    
    def create_context(self, request: operations.CreateContextRequestBody) -> operations.CreateContextResponse:
        r"""Create a new context"""
        base_url = self._server_url
        
        url = base_url.removesuffix('/') + '/context'
        
        headers = {}
        req_content_type, data, form = utils.serialize_request_body(request, "request", 'json')
        if req_content_type not in ('multipart/form-data', 'multipart/mixed'):
            headers['content-type'] = req_content_type
        
        client = self._security_client
        
        http_res = client.request('POST', url, data=data, files=form, headers=headers)
        content_type = http_res.headers.get('Content-Type')

        res = operations.CreateContextResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[operations.CreateContextContext])
                res.context = out
        else:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[operations.CreateContextDefaultApplicationJSON])
                res.create_context_default_application_json_object = out

        return res

    
    def delete_context(self, request: operations.DeleteContextRequest) -> operations.DeleteContextResponse:
        r"""Delete a context"""
        base_url = self._server_url
        
        url = utils.generate_url(operations.DeleteContextRequest, base_url, '/context/{context-id}', request)
        
        
        client = self._security_client
        
        http_res = client.request('DELETE', url)
        content_type = http_res.headers.get('Content-Type')

        res = operations.DeleteContextResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[operations.DeleteContextMessageResponse])
                res.message_response = out
        else:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[operations.DeleteContextDefaultApplicationJSON])
                res.delete_context_default_application_json_object = out

        return res

    
    def delete_environment_variable_from_context(self, request: operations.DeleteEnvironmentVariableFromContextRequest) -> operations.DeleteEnvironmentVariableFromContextResponse:
        r"""Remove an environment variable
        Delete an environment variable from a context.
        """
        base_url = self._server_url
        
        url = utils.generate_url(operations.DeleteEnvironmentVariableFromContextRequest, base_url, '/context/{context-id}/environment-variable/{env-var-name}', request)
        
        
        client = self._security_client
        
        http_res = client.request('DELETE', url)
        content_type = http_res.headers.get('Content-Type')

        res = operations.DeleteEnvironmentVariableFromContextResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[operations.DeleteEnvironmentVariableFromContextMessageResponse])
                res.message_response = out
        else:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[operations.DeleteEnvironmentVariableFromContextDefaultApplicationJSON])
                res.delete_environment_variable_from_context_default_application_json_object = out

        return res

    
    def get_context(self, request: operations.GetContextRequest) -> operations.GetContextResponse:
        r"""Get a context
        Returns basic information about a context.
        """
        base_url = self._server_url
        
        url = utils.generate_url(operations.GetContextRequest, base_url, '/context/{context-id}', request)
        
        
        client = self._security_client
        
        http_res = client.request('GET', url)
        content_type = http_res.headers.get('Content-Type')

        res = operations.GetContextResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[operations.GetContextContext])
                res.context = out
        else:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[operations.GetContextDefaultApplicationJSON])
                res.get_context_default_application_json_object = out

        return res

    
    def list_contexts(self, request: operations.ListContextsRequest) -> operations.ListContextsResponse:
        r"""List contexts
        List all contexts for an owner.
        """
        base_url = self._server_url
        
        url = base_url.removesuffix('/') + '/context'
        
        query_params = utils.get_query_params(operations.ListContextsRequest, request)
        
        client = self._security_client
        
        http_res = client.request('GET', url, params=query_params)
        content_type = http_res.headers.get('Content-Type')

        res = operations.ListContextsResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[operations.ListContexts200ApplicationJSON])
                res.list_contexts_200_application_json_object = out
        else:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[operations.ListContextsDefaultApplicationJSON])
                res.list_contexts_default_application_json_object = out

        return res

    
    def list_environment_variables_from_context(self, request: operations.ListEnvironmentVariablesFromContextRequest) -> operations.ListEnvironmentVariablesFromContextResponse:
        r"""List environment variables
        List information about environment variables in a context, not including their values.
        """
        base_url = self._server_url
        
        url = utils.generate_url(operations.ListEnvironmentVariablesFromContextRequest, base_url, '/context/{context-id}/environment-variable', request)
        
        query_params = utils.get_query_params(operations.ListEnvironmentVariablesFromContextRequest, request)
        
        client = self._security_client
        
        http_res = client.request('GET', url, params=query_params)
        content_type = http_res.headers.get('Content-Type')

        res = operations.ListEnvironmentVariablesFromContextResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[operations.ListEnvironmentVariablesFromContext200ApplicationJSON])
                res.list_environment_variables_from_context_200_application_json_object = out
        else:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[operations.ListEnvironmentVariablesFromContextDefaultApplicationJSON])
                res.list_environment_variables_from_context_default_application_json_object = out

        return res

    