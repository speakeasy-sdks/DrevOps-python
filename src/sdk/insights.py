"""Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT."""

from .sdkconfiguration import SDKConfiguration
from sdk import utils
from sdk.models import operations
from typing import Any, Optional

class Insights:
    sdk_configuration: SDKConfiguration

    def __init__(self, sdk_config: SDKConfiguration) -> None:
        self.sdk_configuration = sdk_config
        
    
    def get_all_insights_branches(self, request: operations.GetAllInsightsBranchesRequest) -> operations.GetAllInsightsBranchesResponse:
        r"""Get all branches for a project
        Get a list of all branches for a specified project. The list will only contain branches currently available within Insights. The maximum number of branches returned by this endpoint is 5,000.
        """
        base_url = utils.template_url(*self.sdk_configuration.get_server_details())
        
        url = utils.generate_url(operations.GetAllInsightsBranchesRequest, base_url, '/insights/{project-slug}/branches', request)
        headers = {}
        query_params = utils.get_query_params(operations.GetAllInsightsBranchesRequest, request)
        headers['Accept'] = 'application/json;q=1, application/json;q=0'
        headers['user-agent'] = f'speakeasy-sdk/{self.sdk_configuration.language} {self.sdk_configuration.sdk_version} {self.sdk_configuration.gen_version} {self.sdk_configuration.openapi_doc_version}'
        
        client = self.sdk_configuration.security_client
        
        http_res = client.request('GET', url, params=query_params, headers=headers)
        content_type = http_res.headers.get('Content-Type')

        res = operations.GetAllInsightsBranchesResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[Any])
                res.get_all_insights_branches_200_application_json_any = out
        else:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[operations.GetAllInsightsBranchesDefaultApplicationJSON])
                res.get_all_insights_branches_default_application_json_object = out

        return res

    
    def get_flaky_tests(self, request: operations.GetFlakyTestsRequest) -> operations.GetFlakyTestsResponse:
        r"""Get flaky tests for a project
        Get a list of flaky tests for a given project. Flaky tests are branch agnostic. 
                     A flaky test is a test that passed and failed in the same commit.
        """
        base_url = utils.template_url(*self.sdk_configuration.get_server_details())
        
        url = utils.generate_url(operations.GetFlakyTestsRequest, base_url, '/insights/{project-slug}/flaky-tests', request)
        headers = {}
        headers['Accept'] = 'application/json;q=1, application/json;q=0'
        headers['user-agent'] = f'speakeasy-sdk/{self.sdk_configuration.language} {self.sdk_configuration.sdk_version} {self.sdk_configuration.gen_version} {self.sdk_configuration.openapi_doc_version}'
        
        client = self.sdk_configuration.security_client
        
        http_res = client.request('GET', url, headers=headers)
        content_type = http_res.headers.get('Content-Type')

        res = operations.GetFlakyTestsResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[operations.GetFlakyTests200ApplicationJSON])
                res.get_flaky_tests_200_application_json_object = out
        else:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[operations.GetFlakyTestsDefaultApplicationJSON])
                res.get_flaky_tests_default_application_json_object = out

        return res

    
    def get_job_timeseries(self, request: operations.GetJobTimeseriesRequest) -> operations.GetJobTimeseriesResponse:
        r"""Job timeseries data
        Get timeseries data for all jobs within a workflow.
        """
        base_url = utils.template_url(*self.sdk_configuration.get_server_details())
        
        url = utils.generate_url(operations.GetJobTimeseriesRequest, base_url, '/insights/time-series/{project-slug}/workflows/{workflow-name}/jobs', request)
        headers = {}
        query_params = utils.get_query_params(operations.GetJobTimeseriesRequest, request)
        headers['Accept'] = 'application/json;q=1, application/json;q=0'
        headers['user-agent'] = f'speakeasy-sdk/{self.sdk_configuration.language} {self.sdk_configuration.sdk_version} {self.sdk_configuration.gen_version} {self.sdk_configuration.openapi_doc_version}'
        
        client = self.sdk_configuration.security_client
        
        http_res = client.request('GET', url, params=query_params, headers=headers)
        content_type = http_res.headers.get('Content-Type')

        res = operations.GetJobTimeseriesResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[operations.GetJobTimeseries200ApplicationJSON])
                res.get_job_timeseries_200_application_json_object = out
        else:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[operations.GetJobTimeseriesDefaultApplicationJSON])
                res.get_job_timeseries_default_application_json_object = out

        return res

    
    def get_org_summary_data(self, request: operations.GetOrgSummaryDataRequest) -> operations.GetOrgSummaryDataResponse:
        r"""Get summary metrics with trends for the entire org, and for each project.
        Gets aggregated summary metrics with trends for the entire org. 
                      Also gets aggregated metrics and trends for each project belonging to the org.
        """
        base_url = utils.template_url(*self.sdk_configuration.get_server_details())
        
        url = utils.generate_url(operations.GetOrgSummaryDataRequest, base_url, '/insights/{org-slug}/summary', request)
        headers = {}
        query_params = utils.get_query_params(operations.GetOrgSummaryDataRequest, request)
        headers['Accept'] = 'application/json;q=1, application/json;q=0'
        headers['user-agent'] = f'speakeasy-sdk/{self.sdk_configuration.language} {self.sdk_configuration.sdk_version} {self.sdk_configuration.gen_version} {self.sdk_configuration.openapi_doc_version}'
        
        client = self.sdk_configuration.security_client
        
        http_res = client.request('GET', url, params=query_params, headers=headers)
        content_type = http_res.headers.get('Content-Type')

        res = operations.GetOrgSummaryDataResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[operations.GetOrgSummaryData200ApplicationJSON])
                res.get_org_summary_data_200_application_json_object = out
        else:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[operations.GetOrgSummaryDataDefaultApplicationJSON])
                res.get_org_summary_data_default_application_json_object = out

        return res

    
    def get_project_workflow_job_metrics(self, request: operations.GetProjectWorkflowJobMetricsRequest) -> operations.GetProjectWorkflowJobMetricsResponse:
        r"""Get summary metrics for a project workflow's jobs.
        Get summary metrics for a project workflow's jobs. Job runs going back at most 90 days are included in the aggregation window. Metrics are refreshed daily, and thus may not include executions from the last 24 hours. Please note that Insights is not a financial reporting tool and should not be used for precise credit reporting.  Credit reporting from Insights does not use the same source of truth as the billing information that is found in the Plan Overview page in the CircleCI UI, nor does the underlying data have the same data accuracy guarantees as the billing information in the CircleCI UI.  This may lead to discrepancies between credits reported from Insights and the billing information in the Plan Overview page of the CircleCI UI.  For precise credit reporting, always use the Plan Overview page in the CircleCI UI.
        """
        base_url = utils.template_url(*self.sdk_configuration.get_server_details())
        
        url = utils.generate_url(operations.GetProjectWorkflowJobMetricsRequest, base_url, '/insights/{project-slug}/workflows/{workflow-name}/jobs', request)
        headers = {}
        query_params = utils.get_query_params(operations.GetProjectWorkflowJobMetricsRequest, request)
        headers['Accept'] = 'application/json;q=1, application/json;q=0'
        headers['user-agent'] = f'speakeasy-sdk/{self.sdk_configuration.language} {self.sdk_configuration.sdk_version} {self.sdk_configuration.gen_version} {self.sdk_configuration.openapi_doc_version}'
        
        client = self.sdk_configuration.security_client
        
        http_res = client.request('GET', url, params=query_params, headers=headers)
        content_type = http_res.headers.get('Content-Type')

        res = operations.GetProjectWorkflowJobMetricsResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[operations.GetProjectWorkflowJobMetrics200ApplicationJSON])
                res.get_project_workflow_job_metrics_200_application_json_object = out
        else:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[operations.GetProjectWorkflowJobMetricsDefaultApplicationJSON])
                res.get_project_workflow_job_metrics_default_application_json_object = out

        return res

    
    def get_project_workflow_metrics(self, request: operations.GetProjectWorkflowMetricsRequest) -> operations.GetProjectWorkflowMetricsResponse:
        r"""Get summary metrics for a project's workflows
        Get summary metrics for a project's workflows.  Workflow runs going back at most 90 days are included in the aggregation window. Metrics are refreshed daily, and thus may not include executions from the last 24 hours.  Please note that Insights is not a financial reporting tool and should not be used for precise credit reporting.  Credit reporting from Insights does not use the same source of truth as the billing information that is found in the Plan Overview page in the CircleCI UI, nor does the underlying data have the same data accuracy guarantees as the billing information in the CircleCI UI.  This may lead to discrepancies between credits reported from Insights and the billing information in the Plan Overview page of the CircleCI UI.  For precise credit reporting, always use the Plan Overview page in the CircleCI UI.
        """
        base_url = utils.template_url(*self.sdk_configuration.get_server_details())
        
        url = utils.generate_url(operations.GetProjectWorkflowMetricsRequest, base_url, '/insights/{project-slug}/workflows', request)
        headers = {}
        query_params = utils.get_query_params(operations.GetProjectWorkflowMetricsRequest, request)
        headers['Accept'] = 'application/json;q=1, application/json;q=0'
        headers['user-agent'] = f'speakeasy-sdk/{self.sdk_configuration.language} {self.sdk_configuration.sdk_version} {self.sdk_configuration.gen_version} {self.sdk_configuration.openapi_doc_version}'
        
        client = self.sdk_configuration.security_client
        
        http_res = client.request('GET', url, params=query_params, headers=headers)
        content_type = http_res.headers.get('Content-Type')

        res = operations.GetProjectWorkflowMetricsResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[operations.GetProjectWorkflowMetrics200ApplicationJSON])
                res.get_project_workflow_metrics_200_application_json_object = out
        else:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[operations.GetProjectWorkflowMetricsDefaultApplicationJSON])
                res.get_project_workflow_metrics_default_application_json_object = out

        return res

    
    def get_project_workflow_runs(self, request: operations.GetProjectWorkflowRunsRequest) -> operations.GetProjectWorkflowRunsResponse:
        r"""Get recent runs of a workflow
        Get recent runs of a workflow. Runs going back at most 90 days are returned. Please note that Insights is not a financial reporting tool and should not be used for precise credit reporting.  Credit reporting from Insights does not use the same source of truth as the billing information that is found in the Plan Overview page in the CircleCI UI, nor does the underlying data have the same data accuracy guarantees as the billing information in the CircleCI UI.  This may lead to discrepancies between credits reported from Insights and the billing information in the Plan Overview page of the CircleCI UI.  For precise credit reporting, always use the Plan Overview page in the CircleCI UI.
        """
        base_url = utils.template_url(*self.sdk_configuration.get_server_details())
        
        url = utils.generate_url(operations.GetProjectWorkflowRunsRequest, base_url, '/insights/{project-slug}/workflows/{workflow-name}', request)
        headers = {}
        query_params = utils.get_query_params(operations.GetProjectWorkflowRunsRequest, request)
        headers['Accept'] = 'application/json;q=1, application/json;q=0'
        headers['user-agent'] = f'speakeasy-sdk/{self.sdk_configuration.language} {self.sdk_configuration.sdk_version} {self.sdk_configuration.gen_version} {self.sdk_configuration.openapi_doc_version}'
        
        client = self.sdk_configuration.security_client
        
        http_res = client.request('GET', url, params=query_params, headers=headers)
        content_type = http_res.headers.get('Content-Type')

        res = operations.GetProjectWorkflowRunsResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[operations.GetProjectWorkflowRuns200ApplicationJSON])
                res.get_project_workflow_runs_200_application_json_object = out
        else:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[operations.GetProjectWorkflowRunsDefaultApplicationJSON])
                res.get_project_workflow_runs_default_application_json_object = out

        return res

    
    def get_project_workflow_test_metrics(self, request: operations.GetProjectWorkflowTestMetricsRequest) -> operations.GetProjectWorkflowTestMetricsResponse:
        r"""Get test metrics for a project's workflows
        Get test metrics for a project's workflows. Currently tests metrics are calculated based on 10 most recent workflow runs.
        """
        base_url = utils.template_url(*self.sdk_configuration.get_server_details())
        
        url = utils.generate_url(operations.GetProjectWorkflowTestMetricsRequest, base_url, '/insights/{project-slug}/workflows/{workflow-name}/test-metrics', request)
        headers = {}
        query_params = utils.get_query_params(operations.GetProjectWorkflowTestMetricsRequest, request)
        headers['Accept'] = 'application/json;q=1, application/json;q=0'
        headers['user-agent'] = f'speakeasy-sdk/{self.sdk_configuration.language} {self.sdk_configuration.sdk_version} {self.sdk_configuration.gen_version} {self.sdk_configuration.openapi_doc_version}'
        
        client = self.sdk_configuration.security_client
        
        http_res = client.request('GET', url, params=query_params, headers=headers)
        content_type = http_res.headers.get('Content-Type')

        res = operations.GetProjectWorkflowTestMetricsResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[operations.GetProjectWorkflowTestMetrics200ApplicationJSON])
                res.get_project_workflow_test_metrics_200_application_json_object = out
        else:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[operations.GetProjectWorkflowTestMetricsDefaultApplicationJSON])
                res.get_project_workflow_test_metrics_default_application_json_object = out

        return res

    
    def get_project_workflows_page_data(self, request: operations.GetProjectWorkflowsPageDataRequest) -> operations.GetProjectWorkflowsPageDataResponse:
        r"""Get summary metrics and trends for a project across it's workflows and branches
        Get summary metrics and trends for a project at workflow and branch level. 
                     Workflow runs going back at most 90 days are included in the aggregation window. 
                     Trends are only supported upto last 30 days. 
                     Please note that Insights is not a financial reporting tool and should not be used for precise credit reporting.  Credit reporting from Insights does not use the same source of truth as the billing information that is found in the Plan Overview page in the CircleCI UI, nor does the underlying data have the same data accuracy guarantees as the billing information in the CircleCI UI.  This may lead to discrepancies between credits reported from Insights and the billing information in the Plan Overview page of the CircleCI UI.  For precise credit reporting, always use the Plan Overview page in the CircleCI UI.
        """
        base_url = utils.template_url(*self.sdk_configuration.get_server_details())
        
        url = utils.generate_url(operations.GetProjectWorkflowsPageDataRequest, base_url, '/insights/pages/{project-slug}/summary', request)
        headers = {}
        query_params = utils.get_query_params(operations.GetProjectWorkflowsPageDataRequest, request)
        headers['Accept'] = 'application/json;q=1, application/json;q=0'
        headers['user-agent'] = f'speakeasy-sdk/{self.sdk_configuration.language} {self.sdk_configuration.sdk_version} {self.sdk_configuration.gen_version} {self.sdk_configuration.openapi_doc_version}'
        
        client = self.sdk_configuration.security_client
        
        http_res = client.request('GET', url, params=query_params, headers=headers)
        content_type = http_res.headers.get('Content-Type')

        res = operations.GetProjectWorkflowsPageDataResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[operations.GetProjectWorkflowsPageData200ApplicationJSON])
                res.get_project_workflows_page_data_200_application_json_object = out
        else:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[operations.GetProjectWorkflowsPageDataDefaultApplicationJSON])
                res.get_project_workflows_page_data_default_application_json_object = out

        return res

    
    def get_workflow_summary(self, request: operations.GetWorkflowSummaryRequest) -> operations.GetWorkflowSummaryResponse:
        r"""Get metrics and trends for workflows
        Get the metrics and trends for a particular workflow on a single branch or all branches
        """
        base_url = utils.template_url(*self.sdk_configuration.get_server_details())
        
        url = utils.generate_url(operations.GetWorkflowSummaryRequest, base_url, '/insights/{project-slug}/workflows/{workflow-name}/summary', request)
        headers = {}
        query_params = utils.get_query_params(operations.GetWorkflowSummaryRequest, request)
        headers['Accept'] = 'application/json;q=1, application/json;q=0'
        headers['user-agent'] = f'speakeasy-sdk/{self.sdk_configuration.language} {self.sdk_configuration.sdk_version} {self.sdk_configuration.gen_version} {self.sdk_configuration.openapi_doc_version}'
        
        client = self.sdk_configuration.security_client
        
        http_res = client.request('GET', url, params=query_params, headers=headers)
        content_type = http_res.headers.get('Content-Type')

        res = operations.GetWorkflowSummaryResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[operations.GetWorkflowSummary200ApplicationJSON])
                res.get_workflow_summary_200_application_json_object = out
        else:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[operations.GetWorkflowSummaryDefaultApplicationJSON])
                res.get_workflow_summary_default_application_json_object = out

        return res

    