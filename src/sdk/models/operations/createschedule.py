"""Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT."""

from __future__ import annotations
import dataclasses
import dateutil.parser
import requests as requests_http
from dataclasses_json import Undefined, dataclass_json
from datetime import datetime
from enum import Enum
from marshmallow import fields
from sdk import utils
from typing import Any, Optional

class CreateScheduleCreateScheduleParametersAttributionActor(str, Enum):
    r"""The attribution-actor of the scheduled pipeline."""
    CURRENT = 'current'
    SYSTEM = 'system'

class CreateScheduleCreateScheduleParametersTimetable2DaysOfWeek(str, Enum):
    r"""Day in a week, in three letters format"""
    TUE = 'TUE'
    SAT = 'SAT'
    SUN = 'SUN'
    MON = 'MON'
    THU = 'THU'
    WED = 'WED'
    FRI = 'FRI'

class CreateScheduleCreateScheduleParametersTimetable2Months(str, Enum):
    r"""Month, in three letters format."""
    MAR = 'MAR'
    NOV = 'NOV'
    DEC = 'DEC'
    JUN = 'JUN'
    MAY = 'MAY'
    OCT = 'OCT'
    FEB = 'FEB'
    APR = 'APR'
    SEP = 'SEP'
    AUG = 'AUG'
    JAN = 'JAN'
    JUL = 'JUL'


@dataclass_json(undefined=Undefined.EXCLUDE)

@dataclasses.dataclass
class CreateScheduleCreateScheduleParametersTimetable2:
    r"""Timetable that specifies when a schedule triggers."""
    days_of_month: list[int] = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('days-of-month') }})
    r"""Days in a month in which the schedule triggers. This is mutually exclusive with days in a week."""
    hours_of_day: list[int] = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('hours-of-day') }})
    r"""Hours in a day in which the schedule triggers."""
    per_hour: int = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('per-hour') }})
    r"""Number of times a schedule triggers per hour, value must be between 1 and 60"""
    days_of_week: Optional[list[CreateScheduleCreateScheduleParametersTimetable2DaysOfWeek]] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('days-of-week'), 'exclude': lambda f: f is None }})
    r"""Days in a week in which the schedule triggers."""
    months: Optional[list[CreateScheduleCreateScheduleParametersTimetable2Months]] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('months'), 'exclude': lambda f: f is None }})
    r"""Months in which the schedule triggers."""
    


class CreateScheduleCreateScheduleParametersTimetable1DaysOfWeek(str, Enum):
    r"""Day in a week, in three letters format"""
    TUE = 'TUE'
    SAT = 'SAT'
    SUN = 'SUN'
    MON = 'MON'
    THU = 'THU'
    WED = 'WED'
    FRI = 'FRI'

class CreateScheduleCreateScheduleParametersTimetable1Months(str, Enum):
    r"""Month, in three letters format."""
    MAR = 'MAR'
    NOV = 'NOV'
    DEC = 'DEC'
    JUN = 'JUN'
    MAY = 'MAY'
    OCT = 'OCT'
    FEB = 'FEB'
    APR = 'APR'
    SEP = 'SEP'
    AUG = 'AUG'
    JAN = 'JAN'
    JUL = 'JUL'


@dataclass_json(undefined=Undefined.EXCLUDE)

@dataclasses.dataclass
class CreateScheduleCreateScheduleParametersTimetable1:
    r"""Timetable that specifies when a schedule triggers."""
    days_of_week: list[CreateScheduleCreateScheduleParametersTimetable1DaysOfWeek] = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('days-of-week') }})
    r"""Days in a week in which the schedule triggers."""
    hours_of_day: list[int] = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('hours-of-day') }})
    r"""Hours in a day in which the schedule triggers."""
    per_hour: int = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('per-hour') }})
    r"""Number of times a schedule triggers per hour, value must be between 1 and 60"""
    days_of_month: Optional[list[int]] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('days-of-month'), 'exclude': lambda f: f is None }})
    r"""Days in a month in which the schedule triggers. This is mutually exclusive with days in a week."""
    months: Optional[list[CreateScheduleCreateScheduleParametersTimetable1Months]] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('months'), 'exclude': lambda f: f is None }})
    r"""Months in which the schedule triggers."""
    



@dataclass_json(undefined=Undefined.EXCLUDE)

@dataclasses.dataclass
class CreateScheduleCreateScheduleParameters:
    r"""The parameters for a create schedule request"""
    attribution_actor: CreateScheduleCreateScheduleParametersAttributionActor = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('attribution-actor') }})
    r"""The attribution-actor of the scheduled pipeline."""
    name: str = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('name') }})
    r"""Name of the schedule."""
    parameters: dict[str, Any] = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('parameters') }})
    r"""Pipeline parameters represented as key-value pairs. Must contain branch or tag."""
    timetable: Any = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('timetable') }})
    r"""Timetable that specifies when a schedule triggers."""
    description: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('description'), 'exclude': lambda f: f is None }})
    r"""Description of the schedule."""
    




@dataclasses.dataclass
class CreateScheduleRequest:
    project_slug: str = dataclasses.field(metadata={'path_param': { 'field_name': 'project-slug', 'style': 'simple', 'explode': False }})
    r"""Project slug in the form `vcs-slug/org-name/repo-name`. The `/` characters may be URL-escaped."""
    request_body: Optional[CreateScheduleCreateScheduleParameters] = dataclasses.field(default=None, metadata={'request': { 'media_type': 'application/json' }})
    



@dataclass_json(undefined=Undefined.EXCLUDE)

@dataclasses.dataclass
class CreateScheduleDefaultApplicationJSON:
    r"""Error response."""
    message: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('message'), 'exclude': lambda f: f is None }})
    



@dataclass_json(undefined=Undefined.EXCLUDE)

@dataclasses.dataclass
class CreateScheduleScheduleUser:
    r"""The attribution actor who will run the scheduled pipeline."""
    id: str = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('id') }})
    r"""The unique ID of the user."""
    login: str = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('login') }})
    r"""The login information for the user on the VCS."""
    name: str = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('name') }})
    r"""The name of the user."""
    


class CreateScheduleScheduleTimetable2DaysOfWeek(str, Enum):
    r"""Day in a week, in three letters format"""
    TUE = 'TUE'
    SAT = 'SAT'
    SUN = 'SUN'
    MON = 'MON'
    THU = 'THU'
    WED = 'WED'
    FRI = 'FRI'

class CreateScheduleScheduleTimetable2Months(str, Enum):
    r"""Month, in three letters format."""
    MAR = 'MAR'
    NOV = 'NOV'
    DEC = 'DEC'
    JUN = 'JUN'
    MAY = 'MAY'
    OCT = 'OCT'
    FEB = 'FEB'
    APR = 'APR'
    SEP = 'SEP'
    AUG = 'AUG'
    JAN = 'JAN'
    JUL = 'JUL'


@dataclass_json(undefined=Undefined.EXCLUDE)

@dataclasses.dataclass
class CreateScheduleScheduleTimetable2:
    r"""Timetable that specifies when a schedule triggers."""
    days_of_month: list[int] = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('days-of-month') }})
    r"""Days in a month in which the schedule triggers. This is mutually exclusive with days in a week."""
    hours_of_day: list[int] = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('hours-of-day') }})
    r"""Hours in a day in which the schedule triggers."""
    per_hour: int = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('per-hour') }})
    r"""Number of times a schedule triggers per hour, value must be between 1 and 60"""
    days_of_week: Optional[list[CreateScheduleScheduleTimetable2DaysOfWeek]] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('days-of-week'), 'exclude': lambda f: f is None }})
    r"""Days in a week in which the schedule triggers."""
    months: Optional[list[CreateScheduleScheduleTimetable2Months]] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('months'), 'exclude': lambda f: f is None }})
    r"""Months in which the schedule triggers."""
    


class CreateScheduleScheduleTimetable1DaysOfWeek(str, Enum):
    r"""Day in a week, in three letters format"""
    TUE = 'TUE'
    SAT = 'SAT'
    SUN = 'SUN'
    MON = 'MON'
    THU = 'THU'
    WED = 'WED'
    FRI = 'FRI'

class CreateScheduleScheduleTimetable1Months(str, Enum):
    r"""Month, in three letters format."""
    MAR = 'MAR'
    NOV = 'NOV'
    DEC = 'DEC'
    JUN = 'JUN'
    MAY = 'MAY'
    OCT = 'OCT'
    FEB = 'FEB'
    APR = 'APR'
    SEP = 'SEP'
    AUG = 'AUG'
    JAN = 'JAN'
    JUL = 'JUL'


@dataclass_json(undefined=Undefined.EXCLUDE)

@dataclasses.dataclass
class CreateScheduleScheduleTimetable1:
    r"""Timetable that specifies when a schedule triggers."""
    days_of_week: list[CreateScheduleScheduleTimetable1DaysOfWeek] = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('days-of-week') }})
    r"""Days in a week in which the schedule triggers."""
    hours_of_day: list[int] = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('hours-of-day') }})
    r"""Hours in a day in which the schedule triggers."""
    per_hour: int = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('per-hour') }})
    r"""Number of times a schedule triggers per hour, value must be between 1 and 60"""
    days_of_month: Optional[list[int]] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('days-of-month'), 'exclude': lambda f: f is None }})
    r"""Days in a month in which the schedule triggers. This is mutually exclusive with days in a week."""
    months: Optional[list[CreateScheduleScheduleTimetable1Months]] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('months'), 'exclude': lambda f: f is None }})
    r"""Months in which the schedule triggers."""
    



@dataclass_json(undefined=Undefined.EXCLUDE)

@dataclasses.dataclass
class CreateScheduleSchedule:
    r"""A schedule response"""
    actor: CreateScheduleScheduleUser = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('actor') }})
    r"""The attribution actor who will run the scheduled pipeline."""
    created_at: datetime = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('created-at'), 'encoder': utils.datetimeisoformat(False), 'decoder': dateutil.parser.isoparse, 'mm_field': fields.DateTime(format='iso') }})
    r"""The date and time the pipeline was created."""
    description: str = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('description') }})
    r"""Description of the schedule."""
    id: str = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('id') }})
    r"""The unique ID of the schedule."""
    name: str = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('name') }})
    r"""Name of the schedule."""
    parameters: dict[str, Any] = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('parameters') }})
    r"""Pipeline parameters represented as key-value pairs. Must contain branch or tag."""
    project_slug: str = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('project-slug') }})
    r"""The project-slug for the schedule"""
    timetable: Any = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('timetable') }})
    r"""Timetable that specifies when a schedule triggers."""
    updated_at: datetime = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('updated-at'), 'encoder': utils.datetimeisoformat(False), 'decoder': dateutil.parser.isoparse, 'mm_field': fields.DateTime(format='iso') }})
    r"""The date and time the pipeline was last updated."""
    




@dataclasses.dataclass
class CreateScheduleResponse:
    content_type: str = dataclasses.field()
    status_code: int = dataclasses.field()
    create_schedule_default_application_json_object: Optional[CreateScheduleDefaultApplicationJSON] = dataclasses.field(default=None)
    r"""Error response."""
    raw_response: Optional[requests_http.Response] = dataclasses.field(default=None)
    schedule: Optional[CreateScheduleSchedule] = dataclasses.field(default=None)
    r"""A schedule object."""
    

