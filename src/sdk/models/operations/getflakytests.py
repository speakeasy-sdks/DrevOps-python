"""Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT."""

from __future__ import annotations
import dataclasses
import requests as requests_http
from dataclasses_json import Undefined, dataclass_json
from sdk import utils
from typing import Any, Optional


@dataclasses.dataclass
class GetFlakyTestsRequest:
    
    project_slug: str = dataclasses.field(metadata={'path_param': { 'field_name': 'project-slug', 'style': 'simple', 'explode': False }})
    r"""Project slug in the form `vcs-slug/org-name/repo-name`. The `/` characters may be URL-escaped."""
    

@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class GetFlakyTestsDefaultApplicationJSON:
    r"""Error response."""
    
    message: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('message'), 'exclude': lambda f: f is None }})
    

@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class GetFlakyTests200ApplicationJSONFlakyTests:
    
    classname: str = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('classname') }})
    r"""The class the test belongs to."""
    file: str = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('file') }})
    r"""The file the test belongs to."""
    job_name: str = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('job-name') }})
    r"""The name of the job."""
    job_number: int = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('job-number') }})
    r"""The number of the job."""
    pipeline_number: int = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('pipeline-number') }})
    r"""The number of the pipeline."""
    source: str = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('source') }})
    r"""The source of the test."""
    test_name: str = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('test-name') }})
    r"""The name of the test."""
    times_flaked: int = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('times-flaked') }})
    r"""The number of times the test flaked."""
    workflow_created_at: Any = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('workflow-created-at') }})
    r"""The date and time when workflow was created."""
    workflow_id: Any = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('workflow-id') }})
    r"""The ID of the workflow associated with the provided test counts"""
    workflow_name: str = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('workflow-name') }})
    r"""The name of the workflow."""
    time_wasted: Optional[int] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('time-wasted'), 'exclude': lambda f: f is None }})
    

@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class GetFlakyTests200ApplicationJSON:
    r"""Flaky tests response"""
    
    flaky_tests: list[GetFlakyTests200ApplicationJSONFlakyTests] = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('flaky-tests') }})
    r"""A list of all instances of flakes. Note that a test is no longer considered flaky after 2 weeks have passed without a flake. Each flake resets this timer."""
    total_flaky_tests: float = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('total-flaky-tests') }})
    r"""A count of unique tests that have failed. If your project has N tests that have flaked multiple times each, this will be equal to N."""
    

@dataclasses.dataclass
class GetFlakyTestsResponse:
    
    content_type: str = dataclasses.field()
    status_code: int = dataclasses.field()
    get_flaky_tests_200_application_json_object: Optional[GetFlakyTests200ApplicationJSON] = dataclasses.field(default=None)
    r"""A list of flaky tests for a project"""
    get_flaky_tests_default_application_json_object: Optional[GetFlakyTestsDefaultApplicationJSON] = dataclasses.field(default=None)
    r"""Error response."""
    raw_response: Optional[requests_http.Response] = dataclasses.field(default=None)
    