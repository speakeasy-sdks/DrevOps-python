"""Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT."""

from __future__ import annotations
import dataclasses
import dateutil.parser
import requests as requests_http
from dataclasses_json import Undefined, dataclass_json
from datetime import datetime
from enum import Enum
from marshmallow import fields
from sdk import utils
from typing import Any, Optional


@dataclasses.dataclass
class GetPipelineByIDRequest:
    
    pipeline_id: str = dataclasses.field(metadata={'path_param': { 'field_name': 'pipeline-id', 'style': 'simple', 'explode': False }})
    r"""The unique ID of the pipeline."""
    

@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class GetPipelineByIDDefaultApplicationJSON:
    r"""Error response."""
    
    message: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('message'), 'exclude': lambda f: f is None }})
    
class GetPipelineByIDPipelineErrorsTypeEnum(str, Enum):
    r"""The type of error."""
    CONFIG = 'config'
    CONFIG_FETCH = 'config-fetch'
    TIMEOUT = 'timeout'
    PERMISSION = 'permission'
    OTHER = 'other'
    PLAN = 'plan'


@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class GetPipelineByIDPipelineErrors:
    r"""An error with a type and message."""
    
    message: str = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('message') }})
    r"""A human-readable error message."""
    type: GetPipelineByIDPipelineErrorsTypeEnum = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('type') }})
    r"""The type of error."""
    
class GetPipelineByIDPipelineStateEnum(str, Enum):
    r"""The current state of the pipeline."""
    CREATED = 'created'
    ERRORED = 'errored'
    SETUP_PENDING = 'setup-pending'
    SETUP = 'setup'
    PENDING = 'pending'


@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class GetPipelineByIDPipelineTriggerActor:
    r"""The user who triggered the Pipeline."""
    
    avatar_url: str = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('avatar_url') }})
    r"""URL to the user's avatar on the VCS"""
    login: str = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('login') }})
    r"""The login information for the user on the VCS."""
    
class GetPipelineByIDPipelineTriggerTypeEnum(str, Enum):
    r"""The type of trigger."""
    SCHEDULED_PIPELINE = 'scheduled_pipeline'
    EXPLICIT = 'explicit'
    API = 'api'
    WEBHOOK = 'webhook'


@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class GetPipelineByIDPipelineTrigger:
    r"""A summary of the trigger."""
    
    actor: GetPipelineByIDPipelineTriggerActor = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('actor') }})
    r"""The user who triggered the Pipeline."""
    received_at: datetime = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('received_at'), 'encoder': utils.datetimeisoformat(False), 'decoder': dateutil.parser.isoparse, 'mm_field': fields.DateTime(format='iso') }})
    r"""The date and time the trigger was received."""
    type: GetPipelineByIDPipelineTriggerTypeEnum = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('type') }})
    r"""The type of trigger."""
    

@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class GetPipelineByIDPipelineVcsCommit:
    r"""The latest commit in the pipeline."""
    
    body: str = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('body') }})
    r"""The body of the commit message."""
    subject: str = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('subject') }})
    r"""The subject of the commit message."""
    

@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class GetPipelineByIDPipelineVcs:
    r"""VCS information for the pipeline."""
    
    origin_repository_url: str = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('origin_repository_url') }})
    r"""URL for the repository where the trigger originated. For fork-PR pipelines, this is the URL to the fork. For other pipelines the `origin_` and `target_repository_url`s will be the same."""
    provider_name: str = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('provider_name') }})
    r"""Name of the VCS provider (e.g. GitHub, Bitbucket)."""
    revision: str = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('revision') }})
    r"""The code revision the pipeline ran."""
    target_repository_url: str = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('target_repository_url') }})
    r"""URL for the repository the trigger targets (i.e. the repository where the PR will be merged). For fork-PR pipelines, this is the URL to the parent repo. For other pipelines, the `origin_` and `target_repository_url`s will be the same."""
    branch: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('branch'), 'exclude': lambda f: f is None }})
    r"""The branch where the pipeline ran. The HEAD commit on this branch was used for the pipeline. Note that `branch` and `tag` are mutually exclusive. To trigger a pipeline for a PR by number use `pull/<number>/head` for the PR ref or `pull/<number>/merge` for the merge ref (GitHub only)."""
    commit: Optional[GetPipelineByIDPipelineVcsCommit] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('commit'), 'exclude': lambda f: f is None }})
    r"""The latest commit in the pipeline."""
    review_id: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('review_id'), 'exclude': lambda f: f is None }})
    r"""The code review id."""
    review_url: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('review_url'), 'exclude': lambda f: f is None }})
    r"""The code review URL."""
    tag: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('tag'), 'exclude': lambda f: f is None }})
    r"""The tag used by the pipeline. The commit that this tag points to was used for the pipeline. Note that `branch` and `tag` are mutually exclusive."""
    

@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class GetPipelineByIDPipeline:
    r"""A pipeline response."""
    
    created_at: datetime = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('created_at'), 'encoder': utils.datetimeisoformat(False), 'decoder': dateutil.parser.isoparse, 'mm_field': fields.DateTime(format='iso') }})
    r"""The date and time the pipeline was created."""
    errors: list[GetPipelineByIDPipelineErrors] = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('errors') }})
    r"""A sequence of errors that have occurred within the pipeline."""
    id: str = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('id') }})
    r"""The unique ID of the pipeline."""
    number: int = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('number') }})
    r"""The number of the pipeline."""
    project_slug: str = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('project_slug') }})
    r"""The project-slug for the pipeline."""
    state: GetPipelineByIDPipelineStateEnum = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('state') }})
    r"""The current state of the pipeline."""
    trigger: GetPipelineByIDPipelineTrigger = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('trigger') }})
    r"""A summary of the trigger."""
    trigger_parameters: Optional[dict[str, Any]] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('trigger_parameters'), 'exclude': lambda f: f is None }})
    updated_at: Optional[datetime] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('updated_at'), 'encoder': utils.datetimeisoformat(True), 'decoder': dateutil.parser.isoparse, 'mm_field': fields.DateTime(format='iso'), 'exclude': lambda f: f is None }})
    r"""The date and time the pipeline was last updated."""
    vcs: Optional[GetPipelineByIDPipelineVcs] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('vcs'), 'exclude': lambda f: f is None }})
    r"""VCS information for the pipeline."""
    

@dataclasses.dataclass
class GetPipelineByIDResponse:
    
    content_type: str = dataclasses.field()
    status_code: int = dataclasses.field()
    get_pipeline_by_id_default_application_json_object: Optional[GetPipelineByIDDefaultApplicationJSON] = dataclasses.field(default=None)
    r"""Error response."""
    pipeline: Optional[GetPipelineByIDPipeline] = dataclasses.field(default=None)
    r"""A pipeline object."""
    raw_response: Optional[requests_http.Response] = dataclasses.field(default=None)
    