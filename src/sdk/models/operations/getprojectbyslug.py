"""Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT."""

from __future__ import annotations
import dataclasses
import requests as requests_http
from dataclasses_json import Undefined, dataclass_json
from enum import Enum
from sdk import utils
from typing import Optional



@dataclasses.dataclass
class GetProjectBySlugRequest:
    project_slug: str = dataclasses.field(metadata={'path_param': { 'field_name': 'project-slug', 'style': 'simple', 'explode': False }})
    r"""Project slug in the form `vcs-slug/org-name/repo-name`. The `/` characters may be URL-escaped."""
    



@dataclass_json(undefined=Undefined.EXCLUDE)

@dataclasses.dataclass
class GetProjectBySlugDefaultApplicationJSON:
    r"""Error response."""
    message: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('message'), 'exclude': lambda f: f is None }})
    


class GetProjectBySlugProjectVcsInfoProvider(str, Enum):
    r"""The VCS provider"""
    BITBUCKET = 'Bitbucket'
    CIRCLE_CI = 'CircleCI'
    GIT_HUB = 'GitHub'


@dataclass_json(undefined=Undefined.EXCLUDE)

@dataclasses.dataclass
class GetProjectBySlugProjectVcsInfo:
    r"""Information about the VCS that hosts the project source code."""
    default_branch: str = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('default_branch') }})
    provider: GetProjectBySlugProjectVcsInfoProvider = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('provider') }})
    r"""The VCS provider"""
    vcs_url: str = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('vcs_url') }})
    r"""URL to the repository hosting the project's code"""
    



@dataclass_json(undefined=Undefined.EXCLUDE)

@dataclasses.dataclass
class GetProjectBySlugProject:
    r"""NOTE: The definition of Project is subject to change."""
    id: str = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('id') }})
    name: str = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('name') }})
    r"""The name of the project"""
    organization_id: str = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('organization_id') }})
    r"""The id of the organization the project belongs to"""
    organization_name: str = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('organization_name') }})
    r"""The name of the organization the project belongs to"""
    organization_slug: str = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('organization_slug') }})
    r"""The slug of the organization the project belongs to"""
    slug: str = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('slug') }})
    r"""Project slug in the form `vcs-slug/org-name/repo-name`. The `/` characters may be URL-escaped."""
    vcs_info: GetProjectBySlugProjectVcsInfo = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('vcs_info') }})
    r"""Information about the VCS that hosts the project source code."""
    




@dataclasses.dataclass
class GetProjectBySlugResponse:
    content_type: str = dataclasses.field()
    status_code: int = dataclasses.field()
    get_project_by_slug_default_application_json_object: Optional[GetProjectBySlugDefaultApplicationJSON] = dataclasses.field(default=None)
    r"""Error response."""
    project: Optional[GetProjectBySlugProject] = dataclasses.field(default=None)
    r"""A project object"""
    raw_response: Optional[requests_http.Response] = dataclasses.field(default=None)
    

