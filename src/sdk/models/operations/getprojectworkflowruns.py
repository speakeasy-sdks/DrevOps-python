"""Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT."""

from __future__ import annotations
import dataclasses
import dateutil.parser
import requests as requests_http
from dataclasses_json import Undefined, dataclass_json
from datetime import datetime
from enum import Enum
from marshmallow import fields
from sdk import utils
from typing import Optional


@dataclasses.dataclass
class GetProjectWorkflowRunsRequest:
    
    project_slug: str = dataclasses.field(metadata={'path_param': { 'field_name': 'project-slug', 'style': 'simple', 'explode': False }})
    r"""Project slug in the form `vcs-slug/org-name/repo-name`. The `/` characters may be URL-escaped."""
    workflow_name: str = dataclasses.field(metadata={'path_param': { 'field_name': 'workflow-name', 'style': 'simple', 'explode': False }})
    r"""The name of the workflow."""
    all_branches: Optional[bool] = dataclasses.field(default=None, metadata={'query_param': { 'field_name': 'all-branches', 'style': 'form', 'explode': True }})
    r"""Whether to retrieve data for all branches combined. Use either this parameter OR the branch name parameter."""
    branch: Optional[str] = dataclasses.field(default=None, metadata={'query_param': { 'field_name': 'branch', 'style': 'form', 'explode': True }})
    r"""The name of a vcs branch. If not passed we will scope the API call to the default branch."""
    end_date: Optional[datetime] = dataclasses.field(default=None, metadata={'query_param': { 'field_name': 'end-date', 'style': 'form', 'explode': True }})
    r"""Include only executions that started before this date. This date can be at most 90 days after the start-date."""
    page_token: Optional[str] = dataclasses.field(default=None, metadata={'query_param': { 'field_name': 'page-token', 'style': 'form', 'explode': True }})
    r"""A token to retrieve the next page of results."""
    start_date: Optional[datetime] = dataclasses.field(default=None, metadata={'query_param': { 'field_name': 'start-date', 'style': 'form', 'explode': True }})
    r"""Include only executions that started at or after this date. This must be specified if an end-date is provided."""
    

@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class GetProjectWorkflowRunsDefaultApplicationJSON:
    r"""Error response."""
    
    message: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('message'), 'exclude': lambda f: f is None }})
    
class GetProjectWorkflowRuns200ApplicationJSONItemsStatusEnum(str, Enum):
    r"""Workflow status."""
    SUCCESS = 'success'
    FAILED = 'failed'
    ERROR = 'error'
    CANCELED = 'canceled'
    UNAUTHORIZED = 'unauthorized'


@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class GetProjectWorkflowRuns200ApplicationJSONItems:
    
    branch: str = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('branch') }})
    r"""The VCS branch of a Workflow's trigger."""
    created_at: datetime = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('created_at'), 'encoder': utils.datetimeisoformat(False), 'decoder': dateutil.parser.isoparse, 'mm_field': fields.DateTime(format='iso') }})
    r"""The date and time the workflow was created."""
    credits_used: int = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('credits_used') }})
    r"""The number of credits used during execution. Note that Insights is not a real time financial reporting tool and should not be used for credit reporting."""
    duration: int = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('duration') }})
    r"""The duration in seconds of a run."""
    id: str = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('id') }})
    r"""The unique ID of the workflow."""
    status: GetProjectWorkflowRuns200ApplicationJSONItemsStatusEnum = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('status') }})
    r"""Workflow status."""
    stopped_at: datetime = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('stopped_at'), 'encoder': utils.datetimeisoformat(False), 'decoder': dateutil.parser.isoparse, 'mm_field': fields.DateTime(format='iso') }})
    r"""The date and time the workflow stopped."""
    

@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class GetProjectWorkflowRuns200ApplicationJSON:
    r"""Paginated recent workflow runs."""
    
    items: list[GetProjectWorkflowRuns200ApplicationJSONItems] = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('items') }})
    r"""Recent workflow runs."""
    next_page_token: str = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('next_page_token') }})
    r"""A token to pass as a `page-token` query parameter to return the next page of results."""
    

@dataclasses.dataclass
class GetProjectWorkflowRunsResponse:
    
    content_type: str = dataclasses.field()
    status_code: int = dataclasses.field()
    get_project_workflow_runs_200_application_json_object: Optional[GetProjectWorkflowRuns200ApplicationJSON] = dataclasses.field(default=None)
    r"""A paginated list of recent workflow runs"""
    get_project_workflow_runs_default_application_json_object: Optional[GetProjectWorkflowRunsDefaultApplicationJSON] = dataclasses.field(default=None)
    r"""Error response."""
    raw_response: Optional[requests_http.Response] = dataclasses.field(default=None)
    