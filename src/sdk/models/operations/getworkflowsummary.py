"""Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT."""

from __future__ import annotations
import dataclasses
import dateutil.parser
import requests as requests_http
from dataclasses_json import Undefined, dataclass_json
from datetime import datetime
from marshmallow import fields
from sdk import utils
from typing import Optional



@dataclasses.dataclass
class GetWorkflowSummaryBranches:
    r"""The names of VCS branches to include in branch-level workflow metrics."""
    




@dataclasses.dataclass
class GetWorkflowSummaryRequest:
    project_slug: str = dataclasses.field(metadata={'path_param': { 'field_name': 'project-slug', 'style': 'simple', 'explode': False }})
    r"""Project slug in the form `vcs-slug/org-name/repo-name`. The `/` characters may be URL-escaped."""
    workflow_name: str = dataclasses.field(metadata={'path_param': { 'field_name': 'workflow-name', 'style': 'simple', 'explode': False }})
    r"""The name of the workflow."""
    all_branches: Optional[bool] = dataclasses.field(default=None, metadata={'query_param': { 'field_name': 'all-branches', 'style': 'form', 'explode': True }})
    r"""Whether to retrieve data for all branches combined. Use either this parameter OR the branch name parameter."""
    branches: Optional[GetWorkflowSummaryBranches] = dataclasses.field(default=None, metadata={'query_param': { 'field_name': 'branches', 'style': 'form', 'explode': True }})
    r"""The names of VCS branches to include in branch-level workflow metrics."""
    



@dataclass_json(undefined=Undefined.EXCLUDE)

@dataclasses.dataclass
class GetWorkflowSummaryDefaultApplicationJSON:
    r"""Error response."""
    message: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('message'), 'exclude': lambda f: f is None }})
    



@dataclass_json(undefined=Undefined.EXCLUDE)

@dataclasses.dataclass
class GetWorkflowSummary200ApplicationJSONMetricsDurationMetrics:
    r"""Metrics relating to the duration of runs for a workflow."""
    max: int = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('max') }})
    r"""The max duration, in seconds, among a group of runs."""
    mean: int = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('mean') }})
    r"""The mean duration, in seconds, among a group of runs."""
    median: int = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('median') }})
    r"""The median duration, in seconds, among a group of runs."""
    min: int = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('min') }})
    r"""The minimum duration, in seconds, among a group of runs."""
    p95: int = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('p95') }})
    r"""The 95th percentile duration, in seconds, among a group of runs."""
    standard_deviation: float = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('standard_deviation') }})
    r"""The standard deviation, in seconds, among a group of runs."""
    



@dataclass_json(undefined=Undefined.EXCLUDE)

@dataclasses.dataclass
class GetWorkflowSummary200ApplicationJSONMetrics:
    r"""Metrics aggregated across a workflow for a given time window."""
    duration_metrics: GetWorkflowSummary200ApplicationJSONMetricsDurationMetrics = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('duration_metrics') }})
    r"""Metrics relating to the duration of runs for a workflow."""
    failed_runs: int = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('failed_runs') }})
    r"""The number of failed runs."""
    mttr: int = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('mttr') }})
    r"""The mean time to recovery (mean time between failures and their next success) in seconds."""
    success_rate: float = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('success_rate') }})
    successful_runs: int = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('successful_runs') }})
    r"""The number of successful runs."""
    throughput: float = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('throughput') }})
    r"""The average number of runs per day."""
    total_credits_used: int = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('total_credits_used') }})
    r"""The total credits consumed by the workflow in the aggregation window. Note that Insights is not a real time financial reporting tool and should not be used for credit reporting."""
    total_runs: int = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('total_runs') }})
    r"""The total number of runs."""
    window_end: datetime = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('window_end'), 'encoder': utils.datetimeisoformat(False), 'decoder': dateutil.parser.isoparse, 'mm_field': fields.DateTime(format='iso') }})
    r"""The end of the aggregation window for workflow metrics."""
    window_start: datetime = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('window_start'), 'encoder': utils.datetimeisoformat(False), 'decoder': dateutil.parser.isoparse, 'mm_field': fields.DateTime(format='iso') }})
    r"""The start of the aggregation window for workflow metrics."""
    



@dataclass_json(undefined=Undefined.EXCLUDE)

@dataclasses.dataclass
class GetWorkflowSummary200ApplicationJSONTrends:
    r"""Trends for aggregated metrics across a workflow for a given time window."""
    failed_runs: float = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('failed_runs') }})
    r"""The trend value for number of failed runs."""
    median_duration_secs: float = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('median_duration_secs') }})
    r"""Trend value for the 50th percentile duration for a workflow for a given time window."""
    mttr: float = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('mttr') }})
    r"""trend for mean time to recovery (mean time between failures and their next success)."""
    p95_duration_secs: float = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('p95_duration_secs') }})
    r"""Trend value for the 95th percentile duration for a workflow for a given time window."""
    success_rate: float = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('success_rate') }})
    r"""The trend value for the success rate."""
    throughput: float = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('throughput') }})
    r"""Trend value for the average number of runs per day."""
    total_credits_used: float = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('total_credits_used') }})
    r"""The trend value for total credits consumed."""
    total_runs: float = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('total_runs') }})
    r"""The trend value for total number of runs."""
    



@dataclass_json(undefined=Undefined.EXCLUDE)

@dataclasses.dataclass
class GetWorkflowSummary200ApplicationJSON:
    r"""Workflow level aggregated metrics and trends response"""
    metrics: GetWorkflowSummary200ApplicationJSONMetrics = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('metrics') }})
    r"""Metrics aggregated across a workflow for a given time window."""
    trends: GetWorkflowSummary200ApplicationJSONTrends = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('trends') }})
    r"""Trends for aggregated metrics across a workflow for a given time window."""
    workflow_names: list[str] = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('workflow_names') }})
    r"""A list of all the workflow names for a given project."""
    




@dataclasses.dataclass
class GetWorkflowSummaryResponse:
    content_type: str = dataclasses.field()
    status_code: int = dataclasses.field()
    get_workflow_summary_200_application_json_object: Optional[GetWorkflowSummary200ApplicationJSON] = dataclasses.field(default=None)
    r"""Metrics and trends for a workflow"""
    get_workflow_summary_default_application_json_object: Optional[GetWorkflowSummaryDefaultApplicationJSON] = dataclasses.field(default=None)
    r"""Error response."""
    raw_response: Optional[requests_http.Response] = dataclasses.field(default=None)
    

