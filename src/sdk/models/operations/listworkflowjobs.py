"""Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT."""

from __future__ import annotations
import dataclasses
import dateutil.parser
import requests as requests_http
from dataclasses_json import Undefined, dataclass_json
from datetime import datetime
from enum import Enum
from marshmallow import fields
from sdk import utils
from typing import Optional


@dataclasses.dataclass
class ListWorkflowJobsRequest:
    
    id: str = dataclasses.field(metadata={'path_param': { 'field_name': 'id', 'style': 'simple', 'explode': False }})
    r"""The unique ID of the workflow."""
    

@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class ListWorkflowJobsDefaultApplicationJSON:
    r"""Error response."""
    
    message: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('message'), 'exclude': lambda f: f is None }})
    
class ListWorkflowJobsWorkflowJobListResponseJobStatus(str, Enum):
    r"""The current status of the job."""
    SUCCESS = 'success'
    RUNNING = 'running'
    NOT_RUN = 'not_run'
    FAILED = 'failed'
    RETRIED = 'retried'
    QUEUED = 'queued'
    NOT_RUNNING = 'not_running'
    INFRASTRUCTURE_FAIL = 'infrastructure_fail'
    TIMEDOUT = 'timedout'
    ON_HOLD = 'on_hold'
    TERMINATED_UNKNOWN = 'terminated-unknown'
    BLOCKED = 'blocked'
    CANCELED = 'canceled'
    UNAUTHORIZED = 'unauthorized'

class ListWorkflowJobsWorkflowJobListResponseJobType(str, Enum):
    r"""The type of job."""
    BUILD = 'build'
    APPROVAL = 'approval'


@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class ListWorkflowJobsWorkflowJobListResponseJob:
    r"""Job"""
    
    dependencies: list[str] = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('dependencies') }})
    r"""A sequence of the unique job IDs for the jobs that this job depends upon in the workflow."""
    id: str = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('id') }})
    r"""The unique ID of the job."""
    name: str = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('name') }})
    r"""The name of the job."""
    project_slug: str = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('project_slug') }})
    r"""The project-slug for the job."""
    started_at: datetime = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('started_at'), 'encoder': utils.datetimeisoformat(False), 'decoder': dateutil.parser.isoparse, 'mm_field': fields.DateTime(format='iso') }})
    r"""The date and time the job started."""
    status: ListWorkflowJobsWorkflowJobListResponseJobStatus = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('status') }})
    r"""The current status of the job."""
    type: ListWorkflowJobsWorkflowJobListResponseJobType = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('type') }})
    r"""The type of job."""
    approval_request_id: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('approval_request_id'), 'exclude': lambda f: f is None }})
    r"""The unique ID of the job."""
    approved_by: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('approved_by'), 'exclude': lambda f: f is None }})
    r"""The unique ID of the user."""
    canceled_by: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('canceled_by'), 'exclude': lambda f: f is None }})
    r"""The unique ID of the user."""
    job_number: Optional[int] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('job_number'), 'exclude': lambda f: f is None }})
    r"""The number of the job."""
    stopped_at: Optional[datetime] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('stopped_at'), 'encoder': utils.datetimeisoformat(True), 'decoder': dateutil.parser.isoparse, 'mm_field': fields.DateTime(format='iso'), 'exclude': lambda f: f is None }})
    r"""The time when the job stopped."""
    

@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class ListWorkflowJobsWorkflowJobListResponse:
    r"""A paginated sequence of jobs."""
    
    items: list[ListWorkflowJobsWorkflowJobListResponseJob] = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('items') }})
    next_page_token: str = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('next_page_token') }})
    r"""A token to pass as a `page-token` query parameter to return the next page of results."""
    

@dataclasses.dataclass
class ListWorkflowJobsResponse:
    
    content_type: str = dataclasses.field()
    status_code: int = dataclasses.field()
    list_workflow_jobs_default_application_json_object: Optional[ListWorkflowJobsDefaultApplicationJSON] = dataclasses.field(default=None)
    r"""Error response."""
    raw_response: Optional[requests_http.Response] = dataclasses.field(default=None)
    workflow_job_list_response: Optional[ListWorkflowJobsWorkflowJobListResponse] = dataclasses.field(default=None)
    r"""A paginated sequence of jobs."""
    