"""Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT."""

import requests as requests_http
from . import utils
from sdk.models import operations
from typing import Optional

class Pipeline:
    _client: requests_http.Session
    _security_client: requests_http.Session
    _server_url: str
    _language: str
    _sdk_version: str
    _gen_version: str

    def __init__(self, client: requests_http.Session, security_client: requests_http.Session, server_url: str, language: str, sdk_version: str, gen_version: str) -> None:
        self._client = client
        self._security_client = security_client
        self._server_url = server_url
        self._language = language
        self._sdk_version = sdk_version
        self._gen_version = gen_version
        
    
    def continue_pipeline(self, request: operations.ContinuePipelineRequestBody) -> operations.ContinuePipelineResponse:
        r"""Continue a pipeline
        Continue a pipeline from the setup phase.
        """
        base_url = self._server_url
        
        url = base_url.removesuffix('/') + '/pipeline/continue'
        headers = {}
        req_content_type, data, form = utils.serialize_request_body(request, "request", 'json')
        if req_content_type not in ('multipart/form-data', 'multipart/mixed'):
            headers['content-type'] = req_content_type
        headers['user-agent'] = f'speakeasy-sdk/{self._language} {self._sdk_version} {self._gen_version}'
        
        client = self._security_client
        
        http_res = client.request('POST', url, data=data, files=form, headers=headers)
        content_type = http_res.headers.get('Content-Type')

        res = operations.ContinuePipelineResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[operations.ContinuePipelineMessageResponse])
                res.message_response = out
        else:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[operations.ContinuePipelineDefaultApplicationJSON])
                res.continue_pipeline_default_application_json_object = out

        return res

    
    def get_pipeline_by_id(self, request: operations.GetPipelineByIDRequest) -> operations.GetPipelineByIDResponse:
        r"""Get a pipeline by ID
        Returns a pipeline by the pipeline ID.
        """
        base_url = self._server_url
        
        url = utils.generate_url(operations.GetPipelineByIDRequest, base_url, '/pipeline/{pipeline-id}', request)
        headers = {}
        headers['user-agent'] = f'speakeasy-sdk/{self._language} {self._sdk_version} {self._gen_version}'
        
        client = self._security_client
        
        http_res = client.request('GET', url, headers=headers)
        content_type = http_res.headers.get('Content-Type')

        res = operations.GetPipelineByIDResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[operations.GetPipelineByIDPipeline])
                res.pipeline = out
        else:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[operations.GetPipelineByIDDefaultApplicationJSON])
                res.get_pipeline_by_id_default_application_json_object = out

        return res

    
    def get_pipeline_by_number(self, request: operations.GetPipelineByNumberRequest) -> operations.GetPipelineByNumberResponse:
        r"""Get a pipeline by pipeline number
        Returns a pipeline by the pipeline number.
        """
        base_url = self._server_url
        
        url = utils.generate_url(operations.GetPipelineByNumberRequest, base_url, '/project/{project-slug}/pipeline/{pipeline-number}', request)
        headers = {}
        headers['user-agent'] = f'speakeasy-sdk/{self._language} {self._sdk_version} {self._gen_version}'
        
        client = self._security_client
        
        http_res = client.request('GET', url, headers=headers)
        content_type = http_res.headers.get('Content-Type')

        res = operations.GetPipelineByNumberResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[operations.GetPipelineByNumberPipeline])
                res.pipeline = out
        else:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[operations.GetPipelineByNumberDefaultApplicationJSON])
                res.get_pipeline_by_number_default_application_json_object = out

        return res

    
    def get_pipeline_config_by_id(self, request: operations.GetPipelineConfigByIDRequest) -> operations.GetPipelineConfigByIDResponse:
        r"""Get a pipeline's configuration
        Returns a pipeline's configuration by ID.
        """
        base_url = self._server_url
        
        url = utils.generate_url(operations.GetPipelineConfigByIDRequest, base_url, '/pipeline/{pipeline-id}/config', request)
        headers = {}
        headers['user-agent'] = f'speakeasy-sdk/{self._language} {self._sdk_version} {self._gen_version}'
        
        client = self._security_client
        
        http_res = client.request('GET', url, headers=headers)
        content_type = http_res.headers.get('Content-Type')

        res = operations.GetPipelineConfigByIDResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[operations.GetPipelineConfigByIDPipelineConfig])
                res.pipeline_config = out
        else:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[operations.GetPipelineConfigByIDDefaultApplicationJSON])
                res.get_pipeline_config_by_id_default_application_json_object = out

        return res

    
    def list_my_pipelines(self, request: operations.ListMyPipelinesRequest) -> operations.ListMyPipelinesResponse:
        r"""Get your pipelines
        Returns a sequence of all pipelines for this project triggered by the user.
        """
        base_url = self._server_url
        
        url = utils.generate_url(operations.ListMyPipelinesRequest, base_url, '/project/{project-slug}/pipeline/mine', request)
        headers = {}
        query_params = utils.get_query_params(operations.ListMyPipelinesRequest, request)
        headers['user-agent'] = f'speakeasy-sdk/{self._language} {self._sdk_version} {self._gen_version}'
        
        client = self._security_client
        
        http_res = client.request('GET', url, params=query_params, headers=headers)
        content_type = http_res.headers.get('Content-Type')

        res = operations.ListMyPipelinesResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[operations.ListMyPipelinesPipelineListResponse])
                res.pipeline_list_response = out
        else:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[operations.ListMyPipelinesDefaultApplicationJSON])
                res.list_my_pipelines_default_application_json_object = out

        return res

    
    def list_pipelines(self, request: operations.ListPipelinesRequest) -> operations.ListPipelinesResponse:
        r"""Get a list of pipelines
        Returns all pipelines for the most recently built projects (max 250) you follow in an organization.
        """
        base_url = self._server_url
        
        url = base_url.removesuffix('/') + '/pipeline'
        headers = {}
        query_params = utils.get_query_params(operations.ListPipelinesRequest, request)
        headers['user-agent'] = f'speakeasy-sdk/{self._language} {self._sdk_version} {self._gen_version}'
        
        client = self._security_client
        
        http_res = client.request('GET', url, params=query_params, headers=headers)
        content_type = http_res.headers.get('Content-Type')

        res = operations.ListPipelinesResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[operations.ListPipelinesPipelineListResponse])
                res.pipeline_list_response = out
        else:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[operations.ListPipelinesDefaultApplicationJSON])
                res.list_pipelines_default_application_json_object = out

        return res

    
    def list_pipelines_for_project(self, request: operations.ListPipelinesForProjectRequest) -> operations.ListPipelinesForProjectResponse:
        r"""Get all pipelines
        Returns all pipelines for this project.
        """
        base_url = self._server_url
        
        url = utils.generate_url(operations.ListPipelinesForProjectRequest, base_url, '/project/{project-slug}/pipeline', request)
        headers = {}
        query_params = utils.get_query_params(operations.ListPipelinesForProjectRequest, request)
        headers['user-agent'] = f'speakeasy-sdk/{self._language} {self._sdk_version} {self._gen_version}'
        
        client = self._security_client
        
        http_res = client.request('GET', url, params=query_params, headers=headers)
        content_type = http_res.headers.get('Content-Type')

        res = operations.ListPipelinesForProjectResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[operations.ListPipelinesForProjectPipelineListResponse])
                res.pipeline_list_response = out
        else:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[operations.ListPipelinesForProjectDefaultApplicationJSON])
                res.list_pipelines_for_project_default_application_json_object = out

        return res

    
    def list_workflows_by_pipeline_id(self, request: operations.ListWorkflowsByPipelineIDRequest) -> operations.ListWorkflowsByPipelineIDResponse:
        r"""Get a pipeline's workflows
        Returns a paginated list of workflows by pipeline ID.
        """
        base_url = self._server_url
        
        url = utils.generate_url(operations.ListWorkflowsByPipelineIDRequest, base_url, '/pipeline/{pipeline-id}/workflow', request)
        headers = {}
        query_params = utils.get_query_params(operations.ListWorkflowsByPipelineIDRequest, request)
        headers['user-agent'] = f'speakeasy-sdk/{self._language} {self._sdk_version} {self._gen_version}'
        
        client = self._security_client
        
        http_res = client.request('GET', url, params=query_params, headers=headers)
        content_type = http_res.headers.get('Content-Type')

        res = operations.ListWorkflowsByPipelineIDResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[operations.ListWorkflowsByPipelineIDWorkflowListResponse])
                res.workflow_list_response = out
        else:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[operations.ListWorkflowsByPipelineIDDefaultApplicationJSON])
                res.list_workflows_by_pipeline_id_default_application_json_object = out

        return res

    
    def trigger_pipeline(self, request: operations.TriggerPipelineRequest) -> operations.TriggerPipelineResponse:
        r"""Trigger a new pipeline
        Triggers a new pipeline on the project.
        """
        base_url = self._server_url
        
        url = utils.generate_url(operations.TriggerPipelineRequest, base_url, '/project/{project-slug}/pipeline', request)
        headers = {}
        req_content_type, data, form = utils.serialize_request_body(request, "request_body", 'json')
        if req_content_type not in ('multipart/form-data', 'multipart/mixed'):
            headers['content-type'] = req_content_type
        headers['user-agent'] = f'speakeasy-sdk/{self._language} {self._sdk_version} {self._gen_version}'
        
        client = self._security_client
        
        http_res = client.request('POST', url, data=data, files=form, headers=headers)
        content_type = http_res.headers.get('Content-Type')

        res = operations.TriggerPipelineResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 201:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[operations.TriggerPipelinePipelineCreation])
                res.pipeline_creation = out
        else:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[operations.TriggerPipelineDefaultApplicationJSON])
                res.trigger_pipeline_default_application_json_object = out

        return res

    