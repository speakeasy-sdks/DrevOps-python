"""Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT."""

import requests as requests_http
from . import utils
from sdk.models import operations
from typing import Optional

class User:
    _client: requests_http.Session
    _security_client: requests_http.Session
    _server_url: str
    _language: str
    _sdk_version: str
    _gen_version: str

    def __init__(self, client: requests_http.Session, security_client: requests_http.Session, server_url: str, language: str, sdk_version: str, gen_version: str) -> None:
        self._client = client
        self._security_client = security_client
        self._server_url = server_url
        self._language = language
        self._sdk_version = sdk_version
        self._gen_version = gen_version
        
    def get_collaborations(self) -> operations.GetCollaborationsResponse:
        r"""Collaborations
        Provides the set of organizations of which a user is a member or a collaborator.
        
        The set of organizations that a user can collaborate on is composed of:
        
        * Organizations that the current user belongs to across VCS types (e.g. BitBucket, GitHub)
        * The parent organization of repository that the user can collaborate on, but is not necessarily a member of
        * The organization of the current user's account
        """
        base_url = self._server_url
        
        url = base_url.removesuffix('/') + '/me/collaborations'
        
        
        client = self._security_client
        
        http_res = client.request('GET', url)
        content_type = http_res.headers.get('Content-Type')

        res = operations.GetCollaborationsResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[list[operations.GetCollaborationsCollaboration]])
                res.collaborations = out
        else:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[operations.GetCollaborationsDefaultApplicationJSON])
                res.get_collaborations_default_application_json_object = out

        return res

    def get_current_user(self) -> operations.GetCurrentUserResponse:
        r"""User Information
        Provides information about the user that is currently signed in.
        """
        base_url = self._server_url
        
        url = base_url.removesuffix('/') + '/me'
        
        
        client = self._security_client
        
        http_res = client.request('GET', url)
        content_type = http_res.headers.get('Content-Type')

        res = operations.GetCurrentUserResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[operations.GetCurrentUserUser])
                res.user = out
        else:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[operations.GetCurrentUserDefaultApplicationJSON])
                res.get_current_user_default_application_json_object = out

        return res

    def get_user(self, request: operations.GetUserRequest) -> operations.GetUserResponse:
        r"""User Information
        Provides information about the user with the given ID.
        """
        base_url = self._server_url
        
        url = utils.generate_url(operations.GetUserRequest, base_url, '/user/{id}', request)
        
        
        client = self._security_client
        
        http_res = client.request('GET', url)
        content_type = http_res.headers.get('Content-Type')

        res = operations.GetUserResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[operations.GetUserUser])
                res.user = out
        else:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[operations.GetUserDefaultApplicationJSON])
                res.get_user_default_application_json_object = out

        return res

    